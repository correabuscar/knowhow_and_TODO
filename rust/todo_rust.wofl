* using std::mem::zeroed() in cases where None is expected in structs would break programs assuming None is 0
  * swap enum variants in the declaration of Option in rust itself
    * recompile rust
      * did it work? anything broke?
      * try its tests
        * find out how to run its tests
    * use that rust for an example project
      * try 'way2' comment (instead of 'way1') in this:
        \ https://github.com/correabuscar/sandbox/commit/74f08d4ce78db24b436e7a265f29800eff7d66a3#diff-badd165b4a546a5cc9f5b275f3e718239123d96ee08e6a4dfbe0857f610b788fR80-R96
      * did it work with that rust?
        \ it should not have because 0(that mem::zeroed()) isn't None, 1 is None now

* rust's global allocator could detect if any alloc was done while within a fork-ed process
  \ or worst case, my own custom allocator would do that in my own program.
  \ but I meant here, my own local copy of rust compiler would do this check(s).
  * first save current process id somewhere before main() gets called
    \ TODO: what if #[no_main] 
    * this assumes no alloc from rust can be done before main() gets called
      \ TODO: is this a true assumption?
      * what if from within non-rust happens?
        \ for fork purposes this doesn't matter, we assume fork() can't be called before main()
        * unless fork() can be called before main() somehow
          \ TODO: see if it can or can't
  * on each alloc, check if current pid is different, then this is the forked process
    \ TODO: unless there's some way to change current pid, then this won't work to detect forks
  * so if in forked process doing an alloc, panic with proper msg (allocs no good in fork-ed process)
    \ https://github.com/rust-lang/rust/pull/81858/files#diff-256489a401631296d6aebb6537ff78cde5cf3c0188004e6d2c479f7cbbc156d2R471-R472

* use the same is it a fork detection mechanism within the panic rust_panic_with_hook() within rustc
  * and thus only abort(in fork) instead of printing user-formatted msg or a stacktrace
    \ https://github.com/rust-lang/rust/issues/122940#issuecomment-2016911490
  * ensure other things like thread locals aren't used within the fork
    \ not sure how, atm.
    \ or maybe they are safe? https://github.com/rust-lang/rust/issues/122940#issuecomment-2016750887
    \ see prev. comments which might've thought they aren't - investigate if they really are or aren't (still uncertain at this time)
  * make sure that println/eprintln in fork doesn't keep anything locked(from parent) so that the fork can actually print instead of hang waiting for unlock! (may have to use pthread_atfork ?)
    \ note: might not be able to 'unlock' if it's not safe to do after fork, TODO: check if can unlock a mutex after fork, this seems to suggest it can't?: https://github.com/rust-lang/rust/issues/64718#issuecomment-1346099608
    \ it seems to be just forgotten insted of unlocked in forked process? eg. https://github.com/rust-lang/rust/pull/82949/files#diff-7015a38ee6056bbfa832b33281ffeaad5531c4dbfaff60ddfce0934475e040f4L45-R56
    * read in 'man pthread_atfork':
      \ When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process.
      \ The original intention of pthread_atfork() was to allow the child process  to  be  returned  to  a  consistent
      \ state.   For example, at the time of the call to fork(2), other threads may have locked mutexes that are visi‐
      \ ble in the user-space memory duplicated in the child.  Such mutexes would never be unlocked, since the threads
      \ that placed the locks are not duplicated in the child.  The intent of pthread_atfork() was to provide a mecha‐
      \ nism whereby the application (or a library) could ensure that mutexes and other process and thread state would
      \ be restored to a consistent state.  In practice, this task is generally too difficult to be practicable.
      * so if some thread in main is in the process of printing, when another thead of main is forking(via libc::fork() I mean), that fork might hold a lock on the stdout/stderr handle(or wut, must check) and thus a print from forked process would lockup waiting, unless rust is already fixing this, but I didn't seem them use pthread_atfork, tho it's mentioned here(but im not really sure what that's about, yet): https://github.com/rust-lang/rust/blob/fc1a4c5cc9308c4b5980c64a73fd344a59c10601/library/std/src/sys/pal/unix/process/process_unix.rs#L285
        \ well looks like there's a way pre_exec() that rust code runs in the child(aka fork) after a fork: https://github.com/rust-lang/rust/pull/82949/files#diff-cc26cc662ae1f48adfa5a89ae2ad13d76ce3c5153da16d812ad650a56c45459fR61-R62

* cargo test doesn't properly catch tests that exit() or abort, etc.
  \ only those that panic, but not double panic(which aborts) are caught
  \ curiously (and I haven't explored why) --test-threads=1 mostly works (output of the name of the current test aka which test failed is still on screen after it fails, unlike --test-threads=2+)
  \ I'm already using libtest's catch_unwind() and set_hook (panic handler) and atexit and now sig handler for abort and also for ctrl+c(todo)
  \ current patch name which is a WIP(work in progress) is: cargo_test-threads_loses_output.patch
  * ensure tests are caught in these cases too:
    * test aborts (SIGABRT aka 6) - use sig handler
    * test panics recursively until stack overflown
    * test panics(once, twice, or recursively) or even aborts, in some weird places
      * in global allocator
      * in Drop (drop)
      * in Display impl during a panic
    * ensure combinations of the above are also tested against
      \ or are they already covered in the above, hmm... can't think atm.
    * ensure panics in the implementation of handling the above cases are still handled
      \ like a panic while accessing some atomic or thread local whose purpose was to guard against recursive panics (for example)
    * what happens if I've my own panic handler (aside from the one that libtest will have after I'm done with the above)
      \ so from within my own test(s)
      * i panic within my panic handler
      * i return from it
      * i abort from it
      * some infinite panic recursion happens within my panic handler eg. in Display impl, or Drop, or global allocator
    * what happens with those #[should_panic] tests
    * what if panic is non-unwinding panic
      \ unsure if it matters here, it's still a kind that abort()s, so should be handled similarily from an abort() kind of case that a panic can cause, above.
    * see if I've handled all cases by inspecting recent stuff I made in sandbox/rust/05*/

* make panic handling in rust_panic_with_hook() handle recursive panics and sig handlers for abort
  * what to do if abort is intercepted by a sig handler that returns control
    * does catch_unwind catch this?
      \ well, it does only if I panic!() within the sigabrt handler
    * if can't catch, then add another path to exit like exit(128+6)
      \ maybe add that anyway? it can be trapped by atexit anyway
  * detect if in fork(aka child)
  * see if I've handled all cases by inspecting recent stuff I made in sandbox/rust/05*/
    \ these, that is:
    \ drwxr-xr-x 1 user user  52 22.03.2024 21:02 global_allocator/
    \ drwxr-xr-x 1 user user 246 23.03.2024 18:41 tests/
    \ drwxr-xr-x 1 user user  56 23.03.2024 20:35 signals/
    \ drwxr-xr-x 1 user user  62 24.03.2024 14:37 abort/
    \ drwxr-xr-x 1 user user 126 25.03.2024 01:48 thread_local/
    \ drwxr-xr-x 1 user user  98 25.03.2024 02:00 fork/

* see if global allocator has all its funcs overriden
  * like realloc, iirc I did see at some point, but it's not in my current way I override global allocator.

* for memtesting purposes of a specific memory area
  \ without keeping a copy anywhere of the initial data(aka randoms) that you generate
  \ but still assuming that the stack memory isn't bad memory tho.
  \ but I'm unsure, atm, if streaming(in rust) means heap allocations are happening?
  * get a stream of randoms for X size
  * pass stream thru a crc computator
    * one pass thru it will compute 8 crcs, for each byte ror-ed from 0 to 7
      \ without needing to keep the whole input in a buffer
      \ one byte at a time, or maybe a minimum is needed, unsure.
  * write that stream to an area of memory of X size
  * compute 8 checksums of the area, each time ror-ing each byte from 0 to 7
  * compare with the ones that crc computator generated
  * if all equal, bam, good-"enough" memory

- write in knowhow.wofl how to run the cache incoherency test, if it eventually works out
  \ I couldn't make it work.

* see those ~/sandbox/rust/05_sandbox/reed-solomon/
  * what happens if the reed solomon codes are lost, like a bit or byte of them ?!

* fix 'cargo test' for tests that abort/exit
  \ currently WIP, i already had this as TODO above!
  * this needs ability to detect fork
    \ WIP
    * this needs multipath backoff for the panic handling code
      \ to avoid infinite recursion when is_fork() is used in panic handling code
  * needs ability to not alloc while doing that multipath backoff aka recursion detection and avoiding same path that caused the recursion
    \ WIP

- fix security vulns in https://github.com/correabuscar/sandbox/security/dependabot
  - must replace failure crate with something else and thus fix the code to use that new thing.
    \ Anyhow is a good replacement for failure::Error.
    \ https://github.com/dtolnay/anyhow
    \ thiserror is a good, near drop-in  replacement for #[derive(Fail)].
    \ https://github.com/dtolnay/thiserror
    \ done: used anyhow! https://github.com/correabuscar/sandbox/commit/9505310157535f5595a90310448f4210f7e38ab4 https://github.com/correabuscar/sandbox/commit/d4263124911ef97efaf4a04e957a22773e497d1d

  - ncurses crate issues
    \ solved in my use case by locally patching them as mentioned below:
    * cursive depends on ncurses-rs
      \ both need patches to get updated from the vulnerable ncurses-rs
      \ https://github.com/jeaye/ncurses-rs/pull/201#issuecomment-2045636905
  * libgit2-sys
  * thread_local
  * regex
  * lock_api
  * time
  * git2
  * owning_ref
  * atty
  * remove_dir_all

* retry/abort in case any operation in rust would panic
  * so instead of panic, the program would wait for use to rectify the problem
    \ at program start a 0 byte file would be made in /tmp/somename
    \ if a situation happens that can be retried(in theory) in rust code,
    \ there would be a prompt or something notifying of the problem and,
    \ asking use to either delete that /tmp file to abort and thus panic as if this whole feature didn't exist.
    \ or rename that file to something like retry or /tmp/somename.retry if the file is /tmp/somename.failure
    \ maybe its contents can be filled with the problem, so renaming it to /tmp/somename.retry would cause the code
    \ to retry;
    \ say if something's about to panic due to not enough memory (and assuming this whole feature doesn't require any,
    \ or it had it preallocated), then this thing with the file telling the prog to retry/abort might work.
    \ it can be abort as in SIGABRT, or panic to panic!() there, or retry to retry the operation, or something else too?
    \ maybe a prompt could be telling user to check file/contents for the problem, but not actually prompt for input because it might mess up the program, even outputting anything on screen/terminal might not work, so this file thingy would be a rudimentary way to do that.
    \ actually might have a thread spawned since start which would bring this up, thus not needing a file, because presumably thread can do whatever (menu, notification) to inform user of problem(s) and allow a retry/abort/panic to be done.
    \ but this means the code that failed(from another thread) needs to can be notified by this monitoring thread; or it can actually use the file method to get notified; however i imagine if multiple threads are in failure mode then must be using different files or something.
    \ just an idea.

* do a macro like the multipath backoff one, to detect when (re)allocation(s) happened to the code within it
  \ so it would be storing the location in source code(via macros like file!())
  \ then return a guard internally which would go out of scope when macro is finished
  \ while guard is active, the global allocator which we already installed(somehow),
  \ will check all active locations and if any are active, we'd notify(well increment their counter)
  \ when guard gets dropped we check if counter>0 then we know if allocations happened.
  \ sure maybe even add (somehow without heap? or by disabling our code temporarily, ie. no re-entry)
  \ the backtrace(s) of where allocation happened, during the live guard, and those are reported when guard is dropped.
  * so name it like assert_this_does_not_allocate!(...);
    \ and "..." can be expression or block.

* find out if I've used AtomicU64 and replace with AtomicUsize
  \ because "AtomicUsize is available on all platforms but AtomicU64 isn't." -src:https://github.com/rust-lang/rust/issues/67939#issuecomment-800306412
  \ well, hmm, i kinda need AtomicU64 for https://doc.rust-lang.org/std/thread/struct.ThreadId.html#method.as_u64

* look into static_init crate as it does mention which things do alloc
  \ https://gitlab.com/okannen/static_init
  * make sure my use of atexit or on_exit doesn't do alloc
    \ or replace them somehow, if they do
  * make sure my use of pthread stuff don't alloc when they shouldn't
    \ like if it's a forked process
    \ or if it's inside panic handler code and it shouldn't alloc(i forget why it shouldn't atm)
    \ or if it's inside global allocator code? (like if (re)alloc panicked, are we re-allocating in the panic handler?! we shouldn't)


* get back to these:
  * browser addons, save on github?
    \ /home/user/SOURCE/browser.stuff/both
  * /home/user/sandbox/rust/05_sandbox/fork/forking_test4
    \ this was testing how fork detection works, which is what i modified in rustc source
    * library/std/src/panicking.rs
      \ /home/user/sandbox/rust/05_sandbox/tests/1tmp/as_root
      \ /var/tmp/portage/dev-lang/rust-1.76.0-r1/work/rustc-1.76.0-src
      \ must make sure the panic handling code isn't recursing due to recursive panics!
      \ 
      * /home/user/sandbox/rust/05_sandbox/recursive_multipath/multipath_backoff4_mixed_both2
        \ this is the strategy to avoid infinite recursing due to recursive panics
        \ in this version, i attempt to keep the thread_local static local to the spot/zone where it's used, which avoids having to use a hashmap and looking it up in it. done.
        \
        - prev. was: /home/user/sandbox/rust/05_sandbox/recursive_multipath/multipath_backoff4_mixed_both
        - /home/user/sandbox/rust/05_sandbox/traits/specialized_method_required
        * /home/user/sandbox/rust/05_sandbox/thread_local/no_heap_allocations_thread_local
          \ need no heap thread_local to keep track of whether recursion happened in panic handling code (ie. here: library/std/src/panicking.rs) because at that point we don't know if we're in fork process(which requires no allocs, if we are) and the query of whether we're in fork or not can recursively panic!
        * thread_local set/get are in: library/std/src/sys/unix/thread_local_key.rs
          - /home/user/sandbox/rust/05_sandbox/macro/each_macro_call_gets_different_same_named_static
          - /home/user/sandbox/rust/05_sandbox/recursion/maybeuninit_t_with_compiler3_but_at_runtime_instead
            \ this is simplified version of /home/user/sandbox/rust/05_sandbox/thread_local/no_heap_allocations_thread_local
            \ ie. it uses one element of the array exclusively, for any thread(which is wrong) but meant to be used for only one thread, because it's just for tests.
            - /home/user/sandbox/rust/05_sandbox/recursion/refcell_option_variant
